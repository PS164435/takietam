// CONFIG2
#pragma config POSCMOD = NONE           // Primary Oscillator Select (primary oscillator disabled)
#pragma config OSCIOFNC = OFF           // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = FRC              // Oscillator Select (Fast RC Oscillator without Postscaler)
#pragma config IESO = OFF               // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) disabled)
// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (1:128)
#pragma config WINDIS = ON              // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF             // Watchdog Timer disabled
#pragma config ICS = PGx2               // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF               // Writes to program memory allowed
#pragma config GCP = OFF                // Code protection is disabled
#pragma config JTAGEN = OFF             // JTAG port is disabled

#include "xc.h"
#include <libpic30.h>
#include <stdio.h>
#include <stdlib.h>

// Defninicja makr tak by kod byl czytelny, przejrzysty, deskryptywny i przyjazny
// uzytkownikowi
#define FCY         4000000UL   // czestotliwosc robocza oscylatora jako polowa
                                //czestotliwosci (FNOSC = FRC -> FCY = 4000000)
// Zdefiniowanie poszczegolnych pinow jako odpowiednie makra
#define LCD_E       LATDbits.LATD4  
#define LCD_RW      LATDbits.LATD5
#define LCD_RS      LATBbits.LATB15
#define LCD_DATA    LATE

// Przypisanie wartosci poszczegolnych komend do wlasciwych makr
#define LCD_CLEAR   0x01    //0b00000001
#define LCD_HOME    0x02    //0b00000010
#define LCD_ON      0x0C    //0b00001100
#define LCD_OFF     0x08    //0b00001000
#define LCD_CONFIG  0x38    //0b00111000
#define LCD_CURSOR      0x80    //0b10000000
#define LINE1           0x00
#define LINE2           0x40
#define LCD_CUST_CHAR   0x40    //0b01000000
#define LCD_SHIFT_R     0x1D    //0b00011100
#define LCD_SHIFT_L     0x1B    //0b00011000

// Definicja funkcji delay w us i ms - operujacych na jednostkach czasu zamiast
// cykli pracy oscylatora

void __delay_us(unsigned long us){
    __delay32(us*FCY/1000000);
}

void __delay_ms(unsigned long ms){
    __delay32(ms*FCY/1000);
}

// Definicja funkcji wysylajacych komendy (RS = 0) i dane (RS = 1) za pomoca
// magistrali rownoleglej (LCD_DATA). Znaki i komendy maja 8 bitow!

void LCD_sendCommand(unsigned char command){
    LCD_RW = 0;     // Zapis
    LCD_RS = 0;     // Przesylanie komend
    LCD_E = 1;      // Otwarcie transmisji danych
    LCD_DATA = command;
    __delay_us(50); // Opoznienie konieczne dla zapisania danych.
    LCD_E = 0;      // Konieczne zablokowanie transmisji po przeslaniu komunikatu.
}

void LCD_sendData(unsigned char data){
    LCD_RW = 0;
    LCD_RS = 1;     // Przesylanie danych
    LCD_E = 1;
    LCD_DATA = data;
    __delay_us(50);
    LCD_E = 0;
}

// Funkcja print wyswietlajaca kolejne 8-bitowe znaki w petli while - * oznacza
// przypisanie nie wartosci zmiennej lecz jej adresu.

void LCD_print(unsigned char* string){
    while(*string){
        LCD_sendData(*string++);
    }
}

// Funkcja ustawiajaca kursor w wybranym miejscu

void LCD_setCursor(unsigned char row, unsigned char col){
    unsigned char address;
    if (row == 1){
        address = LCD_CURSOR + LINE1 + col;
    }
    if (row == 2){
        address = LCD_CURSOR + LINE2 + col;
    }
    LCD_sendCommand(address);
}

// Funkcja ZAPISUJACA znak (zmienna array) do PAMIECI CGRAM na wybranym slocie
// od 0 do 7

void LCD_saveCustChar(unsigned char slot, unsigned char *array) {
    unsigned char i;
    LCD_sendCommand(LCD_CUST_CHAR + (slot*8));
    for(i=0;i<8;i++){
        LCD_sendData(array[i]);
    }
}

// Funkcja inicjalizujaca wyswietlacz LCD. Wysyla niezbedne komendy jak LCD_CONFIG
// i LCD_ON

void LCD_init(){
    __delay_ms(20);
    LCD_sendCommand(LCD_CONFIG);
    __delay_us(50);     // opoznienia wynikaja ze specyfikacji wyswietlacza i czasu
                        // przetwarzania poszczegolnych komend
    LCD_sendCommand(LCD_ON);
    __delay_us(50);
    LCD_sendCommand(LCD_CLEAR);
    __delay_ms(2);
}

// Zdefiniowanie znaku niestandardowego w postaci tablicy 8x5 (8 linii po 5 kropek)

unsigned char symbolWszystko[8] = {                 // znak specjalny - w pelni zamalowany
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111
};

int main(void) {
    TRISB = 0x7FFF;     // Ustawienie rejestrow kierunku
    TRISD = 0x0000;
    TRISE = 0x0000;

    char currentS6 = 0, prevS6 = 0, currentS7 = 0, prevS7 = 0, currentS8 = 0, prevS8 = 0, currentS9 = 0, prevS9 = 0; //variables for buttons
    int game = 1; // 0 pauza / 1 gra
    int cyfra = 0; // od 0 do 9
    int ktora = 0; // która cyfra na liczniku: 0,1,2,3
    int czas = 754; // tu będą różne liczby
    char player1MinutyDziesatki[2], player1MinutyJednosci[2], player1SekundyDziesatki[2], player1SekundyJednosci[2];
    char player2MinutyDziesatki[2], player2MinutyJednosci[2], player2SekundyDziesatki[2], player2SekundyJednosci[2];
    char czasMinutyDziesatki[2], czasMinutyJednosci[2], czasSekundyDziesatki[2], czasSekundyJednosci[2];

    // ============== wyświetlanie czasu =========

    int player1Czas = 671; // tu będą różne liczby
    int player2Czas = 428; // tu będą różne liczby
    int playerkolej = 1; // 1 lub 2

    int player1Minuty = player1Czas / 60;
    int player1Sekundy = player1Czas % 60;
    int player2Minuty = player2Czas / 60;
    int player2Sekundy = player2Czas % 60;
    int czasMinuty = czas / 60;
    int czasSekundy = czas % 60;
    
    

    sprintf(player1MinutyDziesatki, "%d", player1Minuty / 10);
    sprintf(player1MinutyJednosci, "%d", player1Minuty % 10);
    sprintf(player1SekundyDziesatki, "%d", player1Sekundy / 10);
    sprintf(player1SekundyJednosci, "%d", player1Sekundy % 10);
    sprintf(player2MinutyDziesatki, "%d", player2Minuty / 10);
    sprintf(player2MinutyJednosci, "%d", player2Minuty % 10);
    sprintf(player2SekundyDziesatki, "%d", player2Sekundy / 10);
    sprintf(player2SekundyJednosci, "%d", player2Sekundy % 10);
    sprintf(czasMinutyDziesatki, "%d", czasMinuty / 10);
    sprintf(czasMinutyJednosci, "%d", czasMinuty % 10);
    sprintf(czasSekundyDziesatki, "%d", czasSekundy / 10);
    sprintf(czasSekundyJednosci, "%d", czasSekundy % 10);


    if (game == 1){
        LCD_init();
        LCD_setCursor(1,0);
        if (playerkolej == 1){
            LCD_print("<- Tura gracz   ");
        } else {
            LCD_print("   Tura gracz ->");
        }
        LCD_setCursor(2,0);
        LCD_print(player1MinutyDziesatki);
        LCD_print(player1MinutyJednosci);
        LCD_print(":");
        LCD_print(player1SekundyDziesatki);
        LCD_print(player1SekundyJednosci);
        LCD_print(" ---- ");
        LCD_print(player2MinutyDziesatki);
        LCD_print(player2MinutyJednosci);
        LCD_print(":");
        LCD_print(player2SekundyDziesatki);
        LCD_print(player2SekundyJednosci);
    } else {
        LCD_init();
        LCD_setCursor(1,0);
        LCD_print("czas: ");
        LCD_print(czasMinutyDziesatki);
        LCD_print(czasMinutyJednosci);
        LCD_print(":");
        LCD_print(czasSekundyDziesatki);
        LCD_print(czasSekundyJednosci);
        LCD_setCursor(2,1);
        if (ktora == 0){ LCD_print("cyfra 1");}
        if (ktora == 1){ LCD_print("cyfra 2");}
        if (ktora == 2){ LCD_print("cyfra 3");}
        if (ktora == 3){ LCD_print("cyfra 4");}

    }

    // ============== wyświetlanie czasu =========

    // ================ przyciski ===============

     prevS6 = PORTDbits.RD6;      //scanning for a change of buttons' state
     prevS7 = PORTDbits.RD7;
     prevS8 = PORTAbits.RA7;
     prevS9 = PORTDbits.RD13;
     __delay32(150000);
     currentS6 = PORTDbits.RD6;
     currentS7 = PORTDbits.RD7;
     currentS8 = PORTAbits.RA7;
     currentS9 = PORTDbits.RD13;

     if (game == 0){
         if (currentS6 - prevS6 == 1){
             game = 1; // gra zostaje odpalona
         }
         if (currentS7 - prevS7 == 1){
             cyfra = (cyfra + 1) % 10; // cyfra w górę
         }
         if (currentS8 - prevS8 == 1){
             cyfra = (cyfra + 9) % 10; // cyfra w dół
         }
         if (currentS9 - prevS9 == 1){
             ktora = (ktora + 1) % 4; // zmiana liczby na liczniku
         }
     } else {
         if (currentS6 - prevS6 == 1){
             game =1;
         }
         if (currentS7 - prevS7 == 1){
             cyfra = (cyfra + 1) % 4;
         }
         if (currentS8 - prevS8 == 1){
             cyfra = (cyfra + 3) % 4;
         }
         if (currentS9 - prevS9 == 1){
             // cyfra++;
         }
     }


    return 0;
}