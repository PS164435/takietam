// CONFIG2
#pragma config POSCMOD = NONE           // Primary Oscillator Select (primary oscillator disabled)
#pragma config OSCIOFNC = OFF           // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = FRC              // Oscillator Select (Fast RC Oscillator without Postscaler)
#pragma config IESO = OFF               // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) disabled)
// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (1:128)
#pragma config WINDIS = ON              // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF             // Watchdog Timer disabled
#pragma config ICS = PGx2               // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF               // Writes to program memory allowed
#pragma config GCP = OFF                // Code protection is disabled
#pragma config JTAGEN = OFF             // JTAG port is disabled

#include "xc.h"
#include <libpic30.h>

// Defninicja makr tak by kod byl czytelny, przejrzysty, deskryptywny i przyjazny
// uzytkownikowi
#define FCY         4000000UL   // czestotliwosc robocza oscylatora jako polowa
                                //czestotliwosci (FNOSC = FRC -> FCY = 4000000)
// Zdefiniowanie poszczegolnych pinow jako odpowiednie makra
#define LCD_E       LATDbits.LATD4  
#define LCD_RW      LATDbits.LATD5
#define LCD_RS      LATBbits.LATB15
#define LCD_DATA    LATE

// Przypisanie wartosci poszczegolnych komend do wlasciwych makr
#define LCD_CLEAR   0x01    //0b00000001
#define LCD_HOME    0x02    //0b00000010
#define LCD_ON      0x0C    //0b00001100
#define LCD_OFF     0x08    //0b00001000
#define LCD_CONFIG  0x38    //0b00111000
#define LCD_CURSOR      0x80    //0b10000000
#define LINE1           0x00
#define LINE2           0x40
#define LCD_CUST_CHAR   0x40    //0b01000000
#define LCD_SHIFT_R     0x1D    //0b00011100
#define LCD_SHIFT_L     0x1B    //0b00011000

// Definicja funkcji delay w us i ms - operujacych na jednostkach czasu zamiast
// cykli pracy oscylatora

void __delay_us(unsigned long us){
    __delay32(us*FCY/1000000);
}

void __delay_ms(unsigned long ms){
    __delay32(ms*FCY/1000);
}

// Definicja funkcji wysylajacych komendy (RS = 0) i dane (RS = 1) za pomoca
// magistrali rownoleglej (LCD_DATA). Znaki i komendy maja 8 bitow!

void LCD_sendCommand(unsigned char command){
    LCD_RW = 0;     // Zapis
    LCD_RS = 0;     // Przesylanie komend
    LCD_E = 1;      // Otwarcie transmisji danych
    LCD_DATA = command;
    __delay_us(50); // Opoznienie konieczne dla zapisania danych.
    LCD_E = 0;      // Konieczne zablokowanie transmisji po przeslaniu komunikatu.
}

void LCD_sendData(unsigned char data){
    LCD_RW = 0;
    LCD_RS = 1;     // Przesylanie danych
    LCD_E = 1;
    LCD_DATA = data;
    __delay_us(50);
    LCD_E = 0;
}

// Funkcja print wyswietlajaca kolejne 8-bitowe znaki w petli while - * oznacza
// przypisanie nie wartosci zmiennej lecz jej adresu.

void LCD_print(unsigned char* string){
    while(*string){
        LCD_sendData(*string++);
    }
}

// Funkcja ustawiajaca kursor w wybranym miejscu

void LCD_setCursor(unsigned char row, unsigned char col){
    unsigned char address;
    if (row == 1){
        address = LCD_CURSOR + LINE1 + col;
    }
    if (row == 2){
        address = LCD_CURSOR + LINE2 + col;
    }
    LCD_sendCommand(address);
}

// Funkcja ZAPISUJACA znak (zmienna array) do PAMIECI CGRAM na wybranym slocie
// od 0 do 7

void LCD_saveCustChar(unsigned char slot, unsigned char *array) {
    unsigned char i;
    LCD_sendCommand(LCD_CUST_CHAR + (slot*8));
    for(i=0;i<8;i++){
        LCD_sendData(array[i]);
    }
}

// Funkcja inicjalizujaca wyswietlacz LCD. Wysyla niezbedne komendy jak LCD_CONFIG
// i LCD_ON

void LCD_init(){
    __delay_ms(20);
    LCD_sendCommand(LCD_CONFIG);
    __delay_us(50);     // opoznienia wynikaja ze specyfikacji wyswietlacza i czasu
                        // przetwarzania poszczegolnych komend
    LCD_sendCommand(LCD_ON);
    __delay_us(50);
    LCD_sendCommand(LCD_CLEAR);
    __delay_ms(2);
}

// Zdefiniowanie znaku niestandardowego w postaci tablicy 8x5 (8 linii po 5 kropek)

unsigned char symbolWszystko[8] = {                 // znak specjalny - w pelni zamalowany
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b11111
};

unsigned char symbolTrzyWykrzykniki[8] = {          // znak specjalny - 3 wykrzykniki
    0b10101,
    0b10101,
    0b10101,
    0b10101,
    0b10101,
    0b10101,
    0b00000,
    0b10101
};

unsigned char symbolKropkaOdI[8] = {                // znak specjalny - kropka od "i"
    0b00000,
    0b00000,
    0b11111,
    0b11111,
    0b11111,
    0b11111,
    0b00000,
    0b00000
};

unsigned char symbolKropkaOdWykrzyknika[8] = {      // znak specjalny - kropka od "!"
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b11111,
    0b11111,
    0b11111,
    0b11111
};

unsigned char symbolNic[8] = {                      // znak specjalny - nic
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000
};

int main(void) {
    TRISB = 0x7FFF;     // Ustawienie rejestrow kierunku
    TRISD = 0x0000;
    TRISE = 0x0000;


    // etap 1 - przelatujace paski
    LCD_init();                                     // Inicjalizacja wyswietlacza
    LCD_saveCustChar(0, symbolWszystko);            // Zapisanie znaku 'symbolWszystko' do pamieci CGRAM
    LCD_saveCustChar(1, symbolTrzyWykrzykniki);     // Zapisanie znaku 'symbolTrzyWykrzykniki' do pamieci CGRAM
    LCD_saveCustChar(2, symbolKropkaOdI);           // Zapisanie znaku 'symbolKropkaOdI' do pamieci CGRAM
    LCD_saveCustChar(3, symbolKropkaOdWykrzyknika); // Zapisanie znaku 'symbolKropkaOdWykrzyknika' do pamieci CGRAM
    LCD_saveCustChar(4, symbolNic);                 // Zapisanie znaku 'symbolNic' do pamieci CGRAM

    LCD_setCursor(1,16);                            // Ustawienie kursora, wiersz 1, kolumna 16
    for (int i = 0; i<6; i++){          
        LCD_sendData(0);                            // Wyswietlenie znaku ze slotu 0 ('symbolWszystko') w pamieci CGRAM
        LCD_sendData(4);                            // Wyswietlenie znaku ze slotu 4 ('symbolNic') w pamieci CGRAM
        LCD_sendData(4);                            // Wyswietlenie znaku ze slotu 4 ('symbolNic') w pamieci CGRAM    
    }
    LCD_setCursor(2,16);                            // Ustawienie kursora, wiersz 2, kolumna 16
    for (int i = 0; i<6; i++){
        LCD_sendData(0);                            // Wyswietlenie znaku ze slotu 0 ('symbolWszystko') w pamieci CGRAM
        LCD_sendData(4);                            // Wyswietlenie znaku ze slotu 4 ('symbolNic') w pamieci CGRAM
        LCD_sendData(4);                            // Wyswietlenie znaku ze slotu 4 ('symbolNic') w pamieci CGRAM
    }
    for (int i = 0; i<37; i++){
        __delay_ms(200);
        LCD_sendCommand(LCD_SHIFT_L);               // Przesuniecie calej zawartosci o jedno miejsce w lewo (37 razy)
    }

    // etap 2 - przelatujacy napis
    LCD_init();                                     // Inicjalizacja wyswietlacza
    LCD_setCursor(1,16);                            // Ustawienie kursora, wiersz 1, kolumna 16
    LCD_sendData(1);                                // Wyswietlenie znaku ze slotu 1 ('symbolTrzyWykrzykniki') w pamieci CGRAM
    LCD_print(" Pralko-suszarka ");                 // Wyswietlenie napisu
    LCD_sendData(1);                                // Wyswietlenie znaku ze slotu 1 ('symbolTrzyWykrzykniki') w pamieci CGRAM
    LCD_setCursor(2,16);                            // Ustawienie kursora, wiersz 2, kolumna 16
    LCD_sendData(1);                                // Wyswietlenie znaku ze slotu 1 ('symbolTrzyWykrzykniki') w pamieci CGRAM
    LCD_print("  Haier Duo Dry  ");                 // Wyswietlenie napisu
    LCD_sendData(1);                                // Wyswietlenie znaku ze slotu 1 ('symbolTrzyWykrzykniki') w pamieci CGRAM
    for (int i = 0; i<37; i++){
        __delay_ms(300);
        LCD_sendCommand(LCD_SHIFT_L);               // Przesuniecie calej zawartosci o jedno miejsce w lewo (37 razy)
    }

    // etap 3 - migajace " ! i ! "
    void wykrzyknikon(){                            // funkcja wyswietlajaca duze wykrzykniki z symbolow na konkretnych miejscach
        LCD_setCursor(1,0);                         // Ustawienie kursora, wiersz 1, kolumna 0
        LCD_sendData(0);                            // Wyswietlenie znaku ze slotu 0 ('symbolWszystko') w pamieci CGRAM
        LCD_setCursor(2,0);                         // Ustawienie kursora, wiersz 2, kolumna 0
        LCD_sendData(3);                            // Wyswietlenie znaku ze slotu 3 ('symbolKropkaOdWykrzyknika') w pamieci CGRAM
        LCD_setCursor(1,8);                         // Ustawienie kursora, wiersz 1, kolumna 8
        LCD_sendData(0);                            // Wyswietlenie znaku ze slotu 0 ('symbolWszystko') w pamieci CGRAM
        LCD_setCursor(2,8);                         // Ustawienie kursora, wiersz 2, kolumna 8
        LCD_sendData(3);                            // Wyswietlenie znaku ze slotu 3 ('symbolKropkaOdWykrzyknika') w pamieci CGRAM
    }

    void wykrzyknikoff(){                           // funkcja wylaczajaca duze wykrzykniki z symbolow na konkretnych miejscach
        LCD_setCursor(1,0);                         // Ustawienie kursora, wiersz 1, kolumna 0
        LCD_sendData(4);                            // Wyswietlenie znaku ze slotu 4 ('symbolNic') w pamieci CGRAM
        LCD_setCursor(2,0);                         // Ustawienie kursora, wiersz 2, kolumna 0
        LCD_sendData(4);                            // Wyswietlenie znaku ze slotu 4 ('symbolNic') w pamieci CGRAM
        LCD_setCursor(1,8);                         // Ustawienie kursora, wiersz 1, kolumna 8
        LCD_sendData(4);                            // Wyswietlenie znaku ze slotu 4 ('symbolNic') w pamieci CGRAM
        LCD_setCursor(2,8);                         // Ustawienie kursora, wiersz 2, kolumna 8
        LCD_sendData(4);                            // Wyswietlenie znaku ze slotu 4 ('symbolNic') w pamieci CGRAM
    }

                                                    // wyswietlenie duzej litery "i" z symbolow na konkretnym miejscu
    LCD_setCursor(1,4);                             // Ustawienie kursora, wiersz 1, kolumna 4
    LCD_sendData(2);                                // Wyswietlenie znaku ze slotu 2 ('symbolKropkaOdI') w pamieci CGRAM
    LCD_setCursor(2,4);                             // Ustawienie kursora, wiersz 2, kolumna 4
    LCD_sendData(0);                                // Wyswietlenie znaku ze slotu 0 ('symbolWszystko') w pamieci CGRAM
    __delay_ms(400);
    __delay_ms(400);

   for (int i = 0; i<3; i++){                       // miganie wykrzyknikow
   wykrzyknikon();
   __delay_ms(400);
   __delay_ms(400);
   wykrzyknikoff();
   __delay_ms(400);
   __delay_ms(400);
   }

    LCD_sendCommand(LCD_CLEAR);

    // etap 4 - przelatujacy drogi napis
    LCD_init();                                     // Inicjalizacja wyswietlacza

    LCD_setCursor(1,18);                            // Ustawienie kursora, wiersz 1, kolumna 18
    LCD_sendData(1);                                // Wyswietlenie znaku ze slotu 1 ('symbolTrzyWykrzykniki') w pamieci CGRAM
    LCD_print(" Woda Vytautas ");                   // Wyswietlenie napisu
    LCD_sendData(1);                                // Wyswietlenie znaku ze slotu 1 ('symbolTrzyWykrzykniki') w pamieci CGRAM

   for (int i = 0; i<35; i++){
       __delay_ms(300);
       LCD_sendCommand(LCD_SHIFT_L);                // Przesuniecie calej zawartosci o jedno miejsce w lewo (35 razy)
   }

    LCD_init();                                     // Inicjalizacja wyswietlacza

    LCD_setCursor(2,16);                            // Ustawienie kursora, wiersz 2, kolumna 16
    LCD_sendData(1);                                // Wyswietlenie znaku ze slotu 1 ('symbolTrzyWykrzykniki') w pamieci CGRAM
    LCD_print(" Woda Vytautas ");                   // Wyswietlenie napisu
    LCD_sendData(1);                                // Wyswietlenie znaku ze slotu 1 ('symbolTrzyWykrzykniki') w pamieci CGRAM

    for (int i = 0; i<40; i++){
       __delay_ms(300);

       LCD_sendCommand(LCD_SHIFT_R);                // Przesuniecie calej zawartosci o jedno miejsce w prawo (40 razy)
   }

    // etap 4 - migajacy napis
    for (int i = 0; i<3; i++){

    LCD_sendCommand(LCD_CLEAR);    
    LCD_init();                                     // Inicjalizacja wyswietlacza
    LCD_setCursor(1,0);                             // Ustawienie kursora, wiersz 1, kolumna 0
    LCD_print("   NAJLEPSZE    ");                  // Wyswietlenie napisu
    __delay_ms(500);
    __delay_ms(500);
    LCD_init();                                     // Inicjalizacja wyswietlacza
    LCD_setCursor(2,0);                             // Ustawienie kursora, wiersz 2, kolumna 0
    LCD_print(" Z  NAJLEPSZYCH ");                  // Wyswietlenie napisu
    __delay_ms(500);
    __delay_ms(500);
    }

    return 0;
}