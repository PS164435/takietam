// CONFIG2
#pragma config POSCMOD = HS             // Primary Oscillator Select (HS Oscillator mode selected)
#pragma config OSCIOFNC = OFF           // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = PRIPLL           // Oscillator Select (Primary Oscillator with PLL module (HSPLL, ECPLL))
#pragma config IESO = OFF               // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) disabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config WINDIS = ON              // Watchdog Timer Window (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = OFF             // Watchdog Timer Enable (Watchdog Timer is disabled)
#pragma config ICS = PGx2               // Comm Channel Select (Emulator/debugger uses EMUC2/EMUD2)
#pragma config GWRP = OFF               // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF             // JTAG Port Enable (JTAG port is disabled)


#include "xc.h"
#include <libpic30.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

//inicjalizacja portow i timera (zegara)
void init() {
    TRISA = 0x0000;        // Ustaw port A na wyj?cie (diod LED)
    TRISDbits.TRISD7 = 1;  // Ustaw RD7 jako wej?cie (przycisk do przodu)
    TRISDbits.TRISD6 = 1;  // Ustaw RD6 jako wej?cie (przycisk do ty?u)
}

// funkcja dajaca opoznienie programow w milisekundach
void delay(unsigned int ms) {
    while(ms--) {
        __delay32(40000); // Zakladajac, ze zegar to 40 MHz, 1 ms to 40000 cykli
    }
}

// podprogram 1 / licznik binarny w górę
void podprogram1() {
    static int liczba = 0;
    LATA = liczba++;
    delay(100);
}

// podprogram 2 / licznik binarny w dół
void podprogram2() {
    static int liczba = 255;
    LATA = liczba--;
    delay(100);
}

// zamiana binarnie -> Gray
int nagraya(int liczba) {
    int przesunietaliczba = liczba >> 1;
    return przesunietaliczba ^ liczba;
}

// podprogram 3 / licznik w kodzie Graya w górę
void podprogram3() {
    static int liczba = 0;
    LATA = nagraya(liczba++);
    delay(100);
}

// podprogram 4 / licznik w kodzie Graya w dół
void podprogram4() {
    static int liczba = 255;
    LATA = nagraya(liczba--);
    delay(100);
}

// zamiana binarnie -> bcd
int nabcd(int liczba) {
    int bcd = 0;
    int przesuniecie = 0;
    while (liczba > 0) {
        int dziesietna = liczba % 10;
        bcd |= (dziesietna << (przesuniecie * 4));
        liczba /= 10;
        przesuniecie++;
    }
    return bcd;
}

// podprogram 5 / licznik BCD w górę
void podprogram5() {
    static int liczba = 0;
    LATA = nabcd(liczba++);
    if (liczba > 99) 
    {
        liczba = 0;
    }
    delay(100);
}

// podprogram 6 / licznik BCD w dół
void podprogram6() {
    static int liczba = 99;
    LATA = nabcd(liczba--);
    if (liczba > 99)
    {
        liczba = 99;
    }
    delay(100);
}

// podprogram 7 / wezyk
void podprogram7() {
    static int gdzie = 0b111;
    static int kierunek = 1;
    LATA = gdzie;
    if (gdzie == 0b11100000) 
    {
        kierunek = -1;
    }
    if (gdzie == 0b00000111)
    {
        kierunek = 1;
    }
    gdzie = (kierunek == 1) ? (gdzie << 1) : (gdzie >> 1);
    delay(100);
}

// podprogram 8 / kolejka
void podprogram8()
{
    static int leds = 0b00000000; // wszystkie diody wylaczone na poczatku
    static int position = 0b00000001; // pierwsza dioda po prawej na poczatku wlaczona
    static int lit_leds = 0; // stan poczatkowych wlaczonych ledow w kolejce - na poczatku 0

    // ustawienie stanu diod na porcie A
    LATA = leds | position;
    delay(50);

    // sprawdzenie, czy aktualna pozycja to najbardziej prawa dioda
    if (position == 0b10000000)
    {
        // zwiekszenie licznika zapalonych diod od prawej
        lit_leds++;
        // resetuj pozycje do najbardziej prawej diody
        position = 0b00000001;
    } 
    else
    {
        // przesuniecie diody w prawa strone w przeciwnym przypadku
        position <<= 1;
    }

    // aktualizacja stanu diod zapalajac kolejne diody od prawej
    leds = ~((1 << (8 - lit_leds)) - 1);

    // jezeli wszystkie diody sa wlaczone to resetuje liczniki
    if (lit_leds == 8) 
    {
        lit_leds = 0;
        leds = 0;
    }
}

// podprogram 9 / pseudolosowe
void podprogram9() {
    static int lfsr = 0b1110011;  // Pocz?tkowa wartosc 111001 w formacie heksadecymalnym
    static int bit;

    bit = ((lfsr >> 0) ^ (lfsr >> 1)) & 1; // Generowanie pseudolosowego bitu
    
    lfsr = (lfsr >> 1) | (bit << 5); // Przesuni?cie rejestru i wstawienie nowego bitu
    
    // Wy?wietlenie warto?ci na 8-bitowym panelu diod LED
    LATA = lfsr & 0x3F;  // Maskowanie tylko 6 bitów, reszta ustawiona na 0
    
    delay(100);
}

void main() {
    init();
    int current_program = 1;
    while (1) {
        switch (current_program) {
            case 1: podprogram1(); break;
            case 2: podprogram2(); break;
            case 3: podprogram3(); break;
            case 4: podprogram4(); break;
            case 5: podprogram5(); break;
            case 6: podprogram6(); break;
            case 7: podprogram7(); break;
            case 8: podprogram8(); break;
            case 9: podprogram9(); break;
        }

        if (PORTDbits.RD7 == 0) // Sprawdz przycisk do przodu
        { 
            delay(100);  // Debouncing - __delay32(200000);
            current_program++;
            if (current_program > 9) current_program = 1;
        }
        if (PORTDbits.RD6 == 0)   // Sprawdz przycisk do tylu
        {
            delay(100);  // Debouncing
            current_program--;
            if (current_program < 1) current_program = 9;
        }
        delay(5);  // Czas wykonywania programu
    }
}
