// CONFIG2
#pragma config POSCMOD = NONE             // Primary Oscillator Select (primary oscillator disabled)
#pragma config OSCIOFNC = OFF           // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = FRC              // Oscillator Select (Fast RC Oscillator without Postscaler)
#pragma config IESO = OFF               // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) disabled)
// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128 // WDT Prescaler (1:128)
#pragma config WINDIS = ON // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF // Watchdog Timer disabled
#pragma config ICS = PGx2 // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF // Writes to program memory allowed
#pragma config GCP = OFF // Code protection is disabled
#pragma config JTAGEN = OFF // JTAG port is disabled
#include "xc.h"
#include <libpic30.h>
unsigned portValue = 0;
char currentS6 = 0, prevS6 = 0, currentS7 = 0, prevS7 = 0, program = 0;
// Definicja funkcji przerwania - funkcja jest wywolywana, gdy licznik T1 
// przekorczy limit zdefiniowany w PR1
void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    if (program == 0){
        portValue++;
    }
    if (program == 1){
        portValue--;
    }
    LATA = portValue;
    _T1IF = 0;          // wyczyszczenie flagi przerwania
}

int main(void) {
    TRISA = 0x0000;
    TRISD = 0xFFFF;

    AD1CON1 = 0x80E4;
    AD1CON2 = 0x0404;
    AD1CON3 = 0x0F00;
    AD1CHS = 0x00;
    AD1CSSL = 0x20;
    
    unsigned value = 0;
    unsigned int time = 0, portValue=0;
    char currentS6 = 0, currentS7 = 0, prevS7 = 0;
    
    while(1){
        while(!AD1CON1bits.DONE);
        prevS6 = PORTDbits.RD6;
        prevS7 = PORTDbits.RD7;
        __delay32(1500000);
        currentS6 = PORTDbits.RD6;
        currentS7 = PORTDbits.RD7;
        portValue=ADC1BUF0;
        portValue>>=2;;
        
        if (portValue >= 127){
            time++;
            __delay32(10000000);
            LATA=1;
            __delay32(10000000);
            LATA=0;
            while(time >= 5 && PORTDbits.RD6){
            LATA = 255;
            }
        }
        else
        {
            LATA=0;
            time=0;
        }
        __delay32(10000000);
        
    } 
    return 0;
}
