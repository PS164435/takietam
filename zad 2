// CONFIG2
#pragma config POSCMOD = HS             // Primary Oscillator Select (HS Oscillator mode selected)
#pragma config OSCIOFNC = OFF           // Primary Oscillator Output Function (OSC2/CLKO/RC15 functions as CLKO (FOSC/2))
#pragma config FCKSM = CSDCMD           // Clock Switching and Monitor (Clock switching and Fail-Safe Clock Monitor are disabled)
#pragma config FNOSC = PRIPLL           // Oscillator Select (Primary Oscillator with PLL module (HSPLL, ECPLL))
#pragma config IESO = OFF               // Internal External Switch Over Mode (IESO mode (Two-Speed Start-up) disabled)

// CONFIG1
#pragma config WDTPS = PS32768          // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128            // WDT Prescaler (Prescaler ratio of 1:128)
#pragma config WINDIS = ON              // Watchdog Timer Window (Standard Watchdog Timer enabled,(Windowed-mode is disabled))
#pragma config FWDTEN = OFF             // Watchdog Timer Enable (Watchdog Timer is disabled)
#pragma config ICS = PGx2               // Comm Channel Select (Emulator/debugger uses EMUC2/EMUD2)
#pragma config GWRP = OFF               // General Code Segment Write Protect (Writes to program memory are allowed)
#pragma config GCP = OFF                // General Code Segment Code Protect (Code protection is disabled)
#pragma config JTAGEN = OFF             // JTAG Port Enable (JTAG port is disabled)

#include "xc.h"
#include <xc.h>
#include <libpic30.h>
#include <stdio.h>
#include <stdlib.h>

#define FCY         4000000UL   // czestotliwosc robocza oscylatora jako polowa 
                                //czestotliwosci (FNOSC = FRC -> FCY = 4000000)

void __delay_ms(unsigned long ms){
    __delay32(ms*FCY/1000);
}

int main(void) {
    TRISA = 0x0000;     //TRISA = 0b0000000000000000;
    TRISB = 0xFFFF;     //TRISB = 0b1111111111111111;
    TRISD = 0x0040;     // RD6 jako wej≈õcie (dla przycisku)
    
    AD1CON1 = 0x80E4;   //AD1CON1 = 0b1000000011100100;
    AD1CON2 = 0x0404;   //AD1CON2 = 0b0000010000000100;
    AD1CON3 = 0x0F00;   //AD1CON3 = 0b0000111100000000;
    AD1CHS = 0;
    AD1CSSL = 0x0020;   //AD1CSSL = 0b0000000000100000;
   
    unsigned portValue = 0;
    int czas = 0;
    char currentS6 = 0, prevS6 = 0;
    char alarmActive = 0;
    
    while(1){
        while(!AD1CON1bits.DONE);
        portValue = ADC1BUF0;
        
        if (portValue <= 512 && alarmActive == 0){
            LATA = 0;
            czas = 0;
        }
        else
        {
            alarmActive = 1;
            czas++;
            __delay_ms(50);
            LATA = 1;
            __delay_ms(50);
            LATA = 0;              
        }
        if (czas >= 5){
            LATA = 255;
        }   
        prevS6 = PORTDbits.RD6;
        __delay32(15000);
        currentS6 = PORTDbits.RD6;
        if (alarmActive == 1 && portValue <= 512 && currentS6-prevS6 == -1){
            alarmActive = 0;
            czas = 0;
            LATA = 0;    
        }       
    }
    return 0;
}
